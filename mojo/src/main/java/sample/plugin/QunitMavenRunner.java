package sample.plugin;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.IOUtils;
import org.httpobjects.HttpObject;
import org.httpobjects.Response;
import org.httpobjects.jetty.HttpObjectsJettyHandler;
import org.httpobjects.util.ClasspathResourcesObject;
import org.httpobjects.util.FilesystemResourcesObject;
import org.mortbay.jetty.Server;

import com.cj.qunitTestDriver.QUnitTestPage;
import com.gargoylesoftware.htmlunit.BrowserVersion;

public class QunitMavenRunner {
    public static interface Listener {
        void runningTest(String relativePath);
    }
    public List<String> run(final File projectDirectory, final Listener log) {
        final JettyPlusPort jetty = launchHttpServer(projectDirectory);

        try{

            String qUnitTestPath = "src/test";
            File htmlFiles = new File(projectDirectory, qUnitTestPath);

            final List<String> problems = new ArrayList<String>(); 

            scanFiles(htmlFiles, new FileVisitor(){
                @Override
                public void visit(File path) {
                    final String name = path.getName();
                    final String relativePath = path.getAbsolutePath().replaceAll(Pattern.quote(projectDirectory.getAbsolutePath()), "").substring(1);

                    final String pathToHtmlFile;
                    if(name.matches(".*Qunit.*\\.html")){
                        pathToHtmlFile = relativePath;
                    }else if(name.endsWith(".qunit-test.js")){
                        pathToHtmlFile = relativePath + ".Qunit.html";
                    }else{
                        pathToHtmlFile = null;
                    }
                    
                    if(pathToHtmlFile!=null){
                        System.out.println("Running " + relativePath);
                        log.runningTest(relativePath);
                        
                        try {
                            QUnitTestPage page = new QUnitTestPage(jetty.port, pathToHtmlFile, 5000, BrowserVersion.FIREFOX_3_6, true);
                            page.assertTestsPass();
                        } catch (Throwable m){
                            problems.add("Problems found in '" + relativePath +"':\n"+m.getMessage());
                        }    
                    }

                }
            });

            return problems;
        }finally{
            try {
                jetty.server.stop();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    private static class JettyPlusPort {
        final int port;
        final Server server;
        private JettyPlusPort(int port, Server server) {
            super();
            this.port = port;
            this.server = server;
        }

    }

    private JettyPlusPort launchHttpServer(final File projectDirectory) {

        for(int port: new Integer[]{8098, 8198, 8298, 8398, 8498, 8598, 8695, 8796}){

            try{
                Server jetty = HttpObjectsJettyHandler.launchServer(port, 
                        new FilesystemResourcesObject("/{resource*}", projectDirectory),
                        new ClasspathResourcesObject("/qunit-mojo/{resource*}", getClass(), "/qunit-mojo"),
                        new AutoGeneratedQunitHtmlWrappers());
                return new JettyPlusPort(port, jetty);
            }catch(Exception e){
                e.printStackTrace();
            }
        }

        throw new RuntimeException("Could not find a port to which to bind :(");
    }
    
    
    private static class AutoGeneratedQunitHtmlWrappers extends HttpObject {
        private static final String TEMPLATE = readClasspathResource("/qunit.template.html");
        
        public AutoGeneratedQunitHtmlWrappers() {
            super("/{resource*}");
        }
        
        public Response get(org.httpobjects.Request req) {
            final String path = req.pathVars().valueFor("resource");
            
            if(!path.endsWith(".qunit-test.js.Qunit.html")) return null;
            
            final String impliedJavascriptFile = "/" + path.replaceAll(Pattern.quote(".Qunit.html"), "");
            final String generatedHtmlFileContent = TEMPLATE.replaceAll("YOUR_JAVASCRIPT_TEST_FILE_GOES_HERE", Matcher.quoteReplacement(impliedJavascriptFile));
            
            return OK(Html(generatedHtmlFileContent));
        }
        
        private static String readClasspathResource(String name){
            try {
                return IOUtils.toString(AutoGeneratedQunitHtmlWrappers.class.getResourceAsStream(name));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
    

    private static interface FileVisitor{
        void visit(File path);
    }
    private static void scanFiles(File path, FileVisitor visitor){
        if(path.isDirectory()){
            for(File next : path.listFiles()){
                scanFiles(next, visitor);
            }
        }else{
            visitor.visit(path);
        }
    }
}
